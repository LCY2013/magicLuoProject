### set log levels ###
#log4j.rootLogger = INFO, D, E
#root log
#日志信息的优先级从高到低有ERROR、WARN、 INFO、DEBUG
#设置logger级别DEBUG、INFO、WRNING、ERROR和输出格式A、B、C或D
log4j.rootLogger=INFO, A

#mybatis
log4j.logger.org.apache.mybatis=WARN

#sql
log4j.logger.java.sql=WARN

# Druid
log4j.logger.druid.sql=DEBUG
log4j.logger.druid.sql.DataSource=WARN
log4j.logger.druid.sql.Connection=WARN
log4j.logger.druid.sql.Statement=DEBUG
log4j.logger.druid.sql.ResultSet=WARN

# Spring
log4j.logger.org.springframework= WARN

#输出到控制台
log4j.appender.A=org.apache.log4j.ConsoleAppender
log4j.appender.A.layout=org.apache.log4j.PatternLayout
log4j.appender.A.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%c]-[%p] %m%n

#输出到target的log.log文件
log4j.appender.B=org.apache.log4j.FileAppender
log4j.appender.B.File=target/log.log
log4j.appender.B.layout=org.apache.log4j.SimpleLayout

#输出到target的log.html文件
log4j.appender.C=org.apache.log4j.RollingFileAppender
log4j.appender.C.File=target/log.html
log4j.appender.C.MaxFileSize=1000KB
log4j.appender.C.MaxBackupIndex=10
log4j.appender.C.layout=org.apache.log4j.HTMLLayout


log4j.appender.D=org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File =target/springInfo.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = WARN
log4j.appender.D.MaxFileSize = 50000KB
log4j.appender.D.layout=org.apache.log4j.TTCCLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

log4j.appender.E = org.apache.log4j.RollingFileAppender
log4j.appender.E.File = target/springErr.log
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.MaxFileSize = 50000KB
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern =%-d{yyyy-MM-dd HH\:mm\:ss}  [ %l\:%c\:%t\:%r ] - [ %p ]  %m%n


#日志说明
#1. 配置log输出目的地:
#org.apache.log4j.ConsoleAppender（控制台）
#org.apache.log4j.FileAppender（文件）
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#2. log信息的格式:
#org.apache.log4j.HTMLLayout（HTML表格形式）
#org.apache.log4j.SimpleLayout（简单格式的日志，只包括日志信息的级别和指定的信息字符串 ，如:DEBUG - Hello）
#org.apache.log4j.TTCCLayout（日志的格式包括日志产生的时间、线程、类别等等信息）
#org.apache.log4j.PatternLayout（灵活地自定义日志格式）
#当使用org.apache.log4j.PatternLayout来自定义信息格式时，可以使用log4j.appender.A1.layout.ConversionPattern=%d{yyyy-MM-ddHH:mm:ss} %p-%m%n 来格式化信息
#%c 输出所属类的全名，可写为 %c{Num} ,Num类名输出的范围 如："com.sun.aaa.classB",%C{2}将使日志输出输出范围为：aaa.classB
#%d 输出日志时间其格式为 可指定格式 如 %d{HH:mm:ss}等
#%l 输出日志事件发生位置，包括类目名、发生线程，在代码中的行数
#%n 换行符
#%m 输出代码指定信息，如info(“message”),输出message
#%p 输出日志的优先级，即 FATAL ,ERROR 等
#%r 输出从启动到显示该条日志信息所耗费的时间（毫秒数）
#%t 输出产生该日志事件的线程名